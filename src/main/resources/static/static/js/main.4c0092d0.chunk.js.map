{"version":3,"sources":["components/Slider.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","ContinuousSlider","onChange","disabled","value","classes","className","Slider","max","event","newValue","aria-labelledby","App","useState","socketUrl","messageHistory","useRef","React","red","setRed","green","setGreen","blue","setBlue","useWebSocket","sendJsonMessage","lastMessage","readyState","current","useMemo","concat","handleSendMessage","useCallback","r","g","b","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","style","textAlign","margin","display","marginBottom","height","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAIMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,OAIA,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,MACpDC,EAAUR,IAQhB,OACI,qBAAKS,UAAWD,EAAQN,KAAxB,SACI,cAACQ,EAAA,EAAD,CAAQH,MAAOA,EAAOI,IAAK,IAAKN,SAPnB,SAACO,EAAOC,GAEzBR,EAASQ,IAKmDP,SAAUA,EAAUQ,kBAAgB,wBCfxG,IA6DeC,EA7DH,WAAO,IAAD,IACMC,mBAAS,2BAAtBC,EADO,oBAERC,EAAiBC,iBAAO,IAFhB,EAGQC,IAAMJ,SAAS,KAHvB,mBAGPK,EAHO,KAGFC,EAHE,OAIYF,IAAMJ,SAAS,KAJ3B,mBAIPO,EAJO,KAIAC,EAJA,OAKUJ,IAAMJ,SAAS,KALzB,mBAKPS,EALO,KAKDC,EALC,OAWVC,IAAaV,GAHbW,EARU,EAQVA,gBACAC,EATU,EASVA,YACAC,EAVU,EAUVA,WAGJZ,EAAea,QAAUC,mBAAQ,kBAC7Bd,EAAea,QAAQE,OAAOJ,KAAa,CAACA,IAEhD,IAAMK,EAAoBC,uBAAY,SAACC,EAAGC,EAAGC,GAEzCV,EADY,CAAC,IAAOQ,EAAG,MAASC,EAAG,KAAQC,MAE5C,IAoBCC,GAAmB,mBACtBC,aAAWC,WAAa,cADF,cAEtBD,aAAWE,KAAO,QAFI,cAGtBF,aAAWG,QAAU,WAHC,cAItBH,aAAWI,OAAS,UAJE,cAKtBJ,aAAWK,eAAiB,kBALN,GAMvBf,GAEF,OACM,qBAAKgB,MAAO,CAACC,UAAW,UAAxB,SACI,sBAAKD,MAAO,CAACE,OAAQ,OAAQC,QAAS,gBAAtC,UACI,+DAAkCV,KAClC,cAACnC,EAAD,CAAkBC,SA9BN,SAACE,GAClBA,IAAUc,IACTC,EAAOf,GACP2B,EAAkB3B,EAAOgB,EAAOE,KA2BiBnB,SAA+B,SAArBiC,EAA6BhC,MAAOc,IAC3F,cAACjB,EAAD,CAAkBC,SAzBJ,SAACE,GACpBA,IAAUgB,IACTC,EAASjB,GACT2B,EAAkBb,EAAKd,EAAOkB,KAsBqBnB,SAA+B,SAArBiC,EAA6BhC,MAAOgB,IAC7F,cAACnB,EAAD,CAAkBC,SApBL,SAACE,GACnBA,IAAUkB,IACTS,EAAkBb,EAAKE,EAAOhB,GAC9BmB,EAAQnB,KAiB0CD,SAA+B,SAArBiC,EAA6BhC,MAAOkB,IAC5F,qBAAKqB,MAAO,CAACI,aAAc,IAA3B,uBAAwC7B,EAAxC,aAAgDE,EAAhD,aAA0DE,EAA1D,OACA,qBAAKqB,MAAO,CAAC3C,MAAO,OAAQgD,OAAQ,IAAKC,gBAAgB,OAAD,OAAS/B,EAAT,aAAiBE,EAAjB,aAA2BE,EAA3B,cCjDzD4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c0092d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 255,\r\n    },\r\n});\r\n\r\nexport default function ContinuousSlider({onChange, disabled, value}) {\r\n    const classes = useStyles();\r\n    //const [value, setValue] = React.useState(255);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        //setValue(newValue);\r\n        onChange(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Slider value={value} max={255} onChange={handleChange} disabled={disabled} aria-labelledby=\"continuous-slider\" />\r\n        </div>\r\n    );\r\n}","import './App.css';\n\nimport React, { useState, useCallback, useMemo, useRef } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport ContinuousSlider from \"./components/Slider\";\n\nconst App = () => {\n    const [socketUrl] = useState('ws://localhost:8080/rgb');\n    const messageHistory = useRef([]);\n    const [red, setRed] = React.useState(255);\n    const [green, setGreen] = React.useState(255);\n    const [blue, setBlue] = React.useState(255);\n\n    const {\n        sendJsonMessage,\n        lastMessage,\n        readyState,\n    } = useWebSocket(socketUrl);\n\n    messageHistory.current = useMemo(() =>\n        messageHistory.current.concat(lastMessage),[lastMessage]);\n\n    const handleSendMessage = useCallback((r, g, b) => {\n        const msg = {\"red\": r, \"green\": g, \"blue\": b};\n        sendJsonMessage (msg);\n    }, []);\n\n    const handleChangeRed = (value) => {\n        if(value !== red) {\n            setRed(value);\n            handleSendMessage(value, green, blue);\n        }\n    }\n    const handleChangeGreen = (value) => {\n        if(value !== green) {\n            setGreen(value);\n            handleSendMessage(red, value, blue);\n        }\n    }\n    const handleChangeBlue = (value) => {\n        if(value !== blue) {\n            handleSendMessage(red, green, value);\n            setBlue(value);\n        }\n    }\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  return (\n        <div style={{textAlign: \"center\"}}>\n            <div style={{margin: \"auto\", display: \"inline-block\"}}>\n                <span>The WebSocket is currently {connectionStatus}</span>\n                <ContinuousSlider onChange={handleChangeRed} disabled={connectionStatus !== 'Open'} value={red} />\n                <ContinuousSlider onChange={handleChangeGreen} disabled={connectionStatus !== 'Open'} value={green} />\n                <ContinuousSlider onChange={handleChangeBlue} disabled={connectionStatus !== 'Open'} value={blue} />\n                <div style={{marginBottom: 30}}>{`rgb(${red}, ${green}, ${blue})`}</div>\n                <div style={{width: \"100%\", height: 200, backgroundColor: `rgb(${red}, ${green}, ${blue})`}} />\n            </div>\n        </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}